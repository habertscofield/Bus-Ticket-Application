// Generated by view binder compiler. Do not edit!
package com.example.bus_ticketapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.bus_ticketapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AddPriceBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnaddprice;

  @NonNull
  public final TextView currentPrice;

  @NonNull
  public final EditText edtBusprice;

  @NonNull
  public final TextView textView;

  @NonNull
  public final TextView textView8;

  private AddPriceBinding(@NonNull ConstraintLayout rootView, @NonNull Button btnaddprice,
      @NonNull TextView currentPrice, @NonNull EditText edtBusprice, @NonNull TextView textView,
      @NonNull TextView textView8) {
    this.rootView = rootView;
    this.btnaddprice = btnaddprice;
    this.currentPrice = currentPrice;
    this.edtBusprice = edtBusprice;
    this.textView = textView;
    this.textView8 = textView8;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AddPriceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AddPriceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.add_price, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AddPriceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnaddprice;
      Button btnaddprice = ViewBindings.findChildViewById(rootView, id);
      if (btnaddprice == null) {
        break missingId;
      }

      id = R.id.current_price;
      TextView currentPrice = ViewBindings.findChildViewById(rootView, id);
      if (currentPrice == null) {
        break missingId;
      }

      id = R.id.edt_busprice;
      EditText edtBusprice = ViewBindings.findChildViewById(rootView, id);
      if (edtBusprice == null) {
        break missingId;
      }

      id = R.id.textView;
      TextView textView = ViewBindings.findChildViewById(rootView, id);
      if (textView == null) {
        break missingId;
      }

      id = R.id.textView8;
      TextView textView8 = ViewBindings.findChildViewById(rootView, id);
      if (textView8 == null) {
        break missingId;
      }

      return new AddPriceBinding((ConstraintLayout) rootView, btnaddprice, currentPrice,
          edtBusprice, textView, textView8);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
